generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  walletAddress         String   @id @db.VarChar(44)
  tier                  String   @default("standard") // "premium" or "standard"
  walletSource          String   @default("app") // "seeker" or "app"
  genesisVerified       Boolean  @default(false)
  allyBalance           Decimal  @default(0) @db.Decimal(18, 6)
  totalInteractionScore Int      @default(0)
  
  // Reputation fields
  reputationScore       Int      @default(0)
  contentScore          Int      @default(0)
  engagementScore       Int      @default(0)
  communityScore        Int      @default(0)
  loyaltyScore          Int      @default(0)
  dailyRepEarned        Int      @default(0)
  lastRepUpdate         DateTime @default(now())
  loginStreak           Int      @default(0)
  lastLoginDate         DateTime?
  
  // Moderation fields
  isSuspended           Boolean  @default(false)
  suspensionReason      String?  @db.Text
  suspendedUntil        DateTime?
  warningCount          Int      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  posts          Post[]
  replies        Reply[]
  interactions   Interaction[]
  gamesAsPlayer1 Game[]        @relation("Player1Games")
  gamesAsPlayer2 Game[]        @relation("Player2Games")
  gamesWon       Game[]        @relation("WonGames")
  reports        Report[]
  moderationActions ModerationAction[] @relation("ModeratedUser")
  moderatorActions  ModerationAction[] @relation("Moderator")
  repEvents      RepEvent[]
  tokenDistributions TokenDistribution[]

  // Performance indexes
  @@index([tier, createdAt(sort: Desc)]) // For premium user queries 
  @@index([totalInteractionScore(sort: Desc)]) // For leaderboards
  @@index([reputationScore(sort: Desc)]) // For reputation leaderboards
  @@index([dailyRepEarned(sort: Desc), lastRepUpdate]) // For daily distribution
  @@index([createdAt(sort: Desc)]) // For newest users
  @@index([isSuspended, suspendedUntil]) // For moderation queries
  @@map("users")
}

model Post {
  id           String @id @default(cuid())
  authorWallet String @db.VarChar(44)
  content      String @db.Text
  topic        String @db.VarChar(50)
  subtopic     String @db.VarChar(100)

  // Interaction counts (for quick display)
  likeCount  Int @default(0)
  replyCount Int @default(0)
  tipCount   Int @default(0)

  // Moderation fields
  isHidden          Boolean  @default(false)
  moderationReason  String?  @db.Text
  flaggedCount      Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author  User    @relation(fields: [authorWallet], references: [walletAddress])
  replies Reply[]
  game    Game?

  // Performance indexes
  @@index([createdAt(sort: Desc)]) // For chronological post feeds
  @@index([authorWallet, createdAt(sort: Desc)]) // For user profiles
  @@index([topic, createdAt(sort: Desc)]) // For category filtering
  @@index([likeCount(sort: Desc)]) // For popular posts
  @@index([content]) // For search functionality (full-text search)
  @@index([isHidden, createdAt(sort: Desc)]) // For moderation filtering
  @@index([flaggedCount(sort: Desc)]) // For flagged content review
  @@map("posts")
}

model Reply {
  id            String  @id @default(cuid())
  postId        String
  authorWallet  String  @db.VarChar(44)
  content       String  @db.Text
  parentReplyId String? // For nested replies

  likeCount Int @default(0)
  tipCount  Int @default(0)

  // Moderation fields
  isHidden          Boolean  @default(false)
  moderationReason  String?  @db.Text
  flaggedCount      Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post         Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  author       User    @relation(fields: [authorWallet], references: [walletAddress])
  parentReply  Reply?  @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies Reply[] @relation("ReplyToReply")

  // Performance indexes
  @@index([postId, createdAt(sort: Asc)]) // For loading replies in order
  @@index([authorWallet, createdAt(sort: Desc)]) // For user reply history
  @@index([parentReplyId]) // For nested reply threads
  @@index([isHidden, createdAt(sort: Desc)]) // For moderation filtering
  @@index([flaggedCount(sort: Desc)]) // For flagged content review
  @@map("replies")
}

model Interaction {
  id              String   @id @default(cuid())
  userWallet      String   @db.VarChar(44)
  targetType      String   @db.VarChar(10) // "post" or "reply"
  targetId        String // ID of post or reply
  interactionType String   @db.VarChar(10) // "like", "tip"
  amount          Decimal? @db.Decimal(18, 6) // For tips

  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userWallet], references: [walletAddress])

  // Prevent duplicate interactions
  @@unique([userWallet, targetId, interactionType])
  // Performance indexes
  @@index([targetId, interactionType]) // For counting likes/tips on posts
  @@index([userWallet, createdAt(sort: Desc)]) // For user activity history
  @@index([createdAt(sort: Desc)]) // For recent activity feeds
  @@map("interactions")
}

model Game {
  id          String  @id @default(cuid())
  postId      String  @unique
  gameType    String  @db.VarChar(20) // "tictactoe", "rps", "coinflip", "connectfour"
  player1     String  @db.VarChar(44)
  player2     String? @db.VarChar(44)
  currentTurn String? @db.VarChar(44)
  gameState   Json // Board state, moves, etc.
  wager       Decimal @db.Decimal(18, 6)
  winner      String? @db.VarChar(44)
  status      String  @db.VarChar(20) // "waiting", "active", "completed", "cancelled"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  post        Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  player1User User  @relation("Player1Games", fields: [player1], references: [walletAddress])
  player2User User? @relation("Player2Games", fields: [player2], references: [walletAddress])
  winnerUser  User? @relation("WonGames", fields: [winner], references: [walletAddress])

  // Performance indexes
  @@index([status, createdAt(sort: Desc)]) // For finding active/waiting games
  @@index([player1, status]) // For player's games
  @@index([player2, status]) // For player's games
  @@index([gameType, status]) // For browsing games by type
  @@map("games")
}

model Report {
  id             String    @id @default(cuid())
  reporterWallet String    @db.VarChar(44)
  targetType     String    @db.VarChar(10) // "post" or "reply"
  targetId       String // ID of post or reply
  reason         String    @db.VarChar(50) // "spam", "harassment", "inappropriate", "misinformation", "other"
  description    String?   @db.Text // Optional detailed description
  status         String    @default("pending") @db.VarChar(20) // "pending", "reviewed", "resolved", "dismissed"
  moderatorNotes String?   @db.Text // Notes from moderator
  resolvedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reporter User @relation(fields: [reporterWallet], references: [walletAddress])

  // Prevent duplicate reports from same user for same content
  @@unique([reporterWallet, targetId])
  // Performance indexes
  @@index([status, createdAt(sort: Desc)]) // For moderator dashboard
  @@index([targetId, targetType]) // For getting reports on specific content
  @@index([reporterWallet, createdAt(sort: Desc)]) // For user report history
  @@index([reason, status]) // For report analytics
  @@map("reports")
}

model ModerationAction {
  id              String   @id @default(cuid())
  moderatorWallet String   @db.VarChar(44)
  targetType      String   @db.VarChar(10) // "user", "post", "reply"
  targetId        String // ID of user, post, or reply
  actionType      String   @db.VarChar(20) // "hide", "warn", "suspend", "unsuspend", "delete"
  reason          String   @db.Text
  duration        Int? // Duration in hours for suspensions
  reportId        String? // Related report that triggered this action
  
  createdAt DateTime @default(now())
  
  // Relations
  moderator User @relation("Moderator", fields: [moderatorWallet], references: [walletAddress])
  targetUser User? @relation("ModeratedUser", fields: [targetId], references: [walletAddress])
  
  // Performance indexes
  @@index([targetType, targetId]) // For content moderation history
  @@index([moderatorWallet, createdAt(sort: Desc)]) // For moderator activity
  @@index([actionType, createdAt(sort: Desc)]) // For action analytics
  @@index([reportId]) // For linking to reports
  @@map("moderation_actions")
}

model RepEvent {
  id          String   @id @default(cuid())
  userWallet  String   @db.VarChar(44)
  eventType   String   @db.VarChar(50) // post, like, comment, tip, game_win, etc.
  category    String   @db.VarChar(20) // content, engagement, community, loyalty
  points      Int
  multiplier  Decimal  @default(1.0) @db.Decimal(3, 2)
  description String?  @db.Text
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  user User @relation(fields: [userWallet], references: [walletAddress], onDelete: Cascade)

  // Performance indexes
  @@index([userWallet, createdAt(sort: Desc)])
  @@index([eventType])
  @@index([createdAt])
  @@map("rep_events")
}

model DailyRepPool {
  id                String    @id @default(cuid())
  date              DateTime  @unique @db.Date
  totalPoolSize     Decimal   @default(10000) @db.Decimal(18, 6) // 10k ALLY daily
  totalRepGenerated Int       @default(0)
  participantCount  Int       @default(0)
  distributed       Boolean   @default(false)
  distributedAt     DateTime?
  createdAt         DateTime  @default(now())

  @@map("daily_rep_pools")
}

model TokenDistribution {
  id              String    @id @default(cuid())
  userWallet      String    @db.VarChar(44)
  date            DateTime  @db.Date
  repEarned       Int
  sharePercentage Decimal   @db.Decimal(6, 4) // e.g., 5.25%
  tokensEarned    Decimal   @db.Decimal(18, 6)
  claimed         Boolean   @default(false)
  claimedAt       DateTime?
  createdAt       DateTime  @default(now())

  // Relations
  user User @relation(fields: [userWallet], references: [walletAddress], onDelete: Cascade)

  // Prevent duplicate distributions
  @@unique([userWallet, date])
  // Performance indexes
  @@index([userWallet, date(sort: Desc)])
  @@index([claimed, userWallet])
  @@map("token_distributions")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  walletAddress            String              @id @db.VarChar(44)
  tier                     String              @default("standard")
  walletSource             String              @default("app")
  genesisVerified          Boolean             @default(false)
  allyBalance              Decimal             @default(0) @db.Decimal(18, 6)
  totalInteractionScore    Int                 @default(0)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  bio                      String?
  communityScore           Int                 @default(0)
  contentScore             Int                 @default(0)
  displayName              String?             @db.VarChar(50)
  engagementScore          Int                 @default(0)
  isSuspended              Boolean             @default(false)
  lastLoginDate            DateTime?
  lastRepUpdate            DateTime            @default(now())
  location                 String?             @db.VarChar(100)
  loginStreak              Int                 @default(0)
  loyaltyScore             Int                 @default(0)
  nftAvatar                String?
  pushNotificationsEnabled Boolean             @default(true)
  pushToken                String?             @db.VarChar(255)
  reputationScore          Int                 @default(0)
  snsUsername              String?             @db.VarChar(100)
  suspendedUntil           DateTime?
  suspensionReason         String?
  themeColor               String?             @db.VarChar(7)
  twitter                  String?             @db.VarChar(50)
  warningCount             Int                 @default(0)
  website                  String?             @db.VarChar(200)
  weekStartDate            DateTime?
  weeklyRepEarned          Int                 @default(0)
  gamesAsPlayer1           Game[]              @relation("Player1Games")
  gamesAsPlayer2           Game[]              @relation("Player2Games")
  gamesWon                 Game[]              @relation("WonGames")
  interactions             Interaction[]
  moderatorActions         ModerationAction[]  @relation("Moderator")
  moderationActions        ModerationAction[]  @relation("ModeratedUser")
  sentNotifications        Notification[]      @relation("NotificationSender")
  notifications            Notification[]
  posts                    Post[]
  repEvents                RepEvent[]
  replies                  Reply[]
  reports                  Report[]
  tokenDistributions       TokenDistribution[]

  @@index([tier, createdAt(sort: Desc)])
  @@index([totalInteractionScore(sort: Desc)])
  @@index([reputationScore(sort: Desc)])
  @@index([weeklyRepEarned(sort: Desc), weekStartDate])
  @@index([createdAt(sort: Desc)])
  @@index([isSuspended, suspendedUntil])
  @@map("users")
}

model Post {
  id               String         @id @default(cuid())
  authorWallet     String         @db.VarChar(44)
  content          String
  topic            String?        @db.VarChar(50)
  subtopic         String?        @db.VarChar(100)
  likeCount        Int            @default(0)
  replyCount       Int            @default(0)
  tipCount         Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  flaggedCount     Int            @default(0)
  imageUrl         String?
  isHidden         Boolean        @default(false)
  moderationReason String?
  videoUrl         String?
  game             Game?
  notifications    Notification[]
  author           User           @relation(fields: [authorWallet], references: [walletAddress])
  replies          Reply[]
  sponsoredPost    SponsoredPost?

  @@index([createdAt(sort: Desc)])
  @@index([authorWallet, createdAt(sort: Desc)])
  @@index([topic, createdAt(sort: Desc)])
  @@index([likeCount(sort: Desc)])
  @@index([content])
  @@index([isHidden, createdAt(sort: Desc)])
  @@index([flaggedCount(sort: Desc)])
  @@map("posts")
}

model Reply {
  id               String   @id @default(cuid())
  postId           String
  authorWallet     String   @db.VarChar(44)
  content          String
  parentReplyId    String?
  likeCount        Int      @default(0)
  tipCount         Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  flaggedCount     Int      @default(0)
  isHidden         Boolean  @default(false)
  moderationReason String?
  imageUrl         String?  @db.VarChar(500)
  videoUrl         String?  @db.VarChar(500)
  author           User     @relation(fields: [authorWallet], references: [walletAddress])
  parentReply      Reply?   @relation("ReplyToReply", fields: [parentReplyId], references: [id])
  childReplies     Reply[]  @relation("ReplyToReply")
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
  @@index([authorWallet, createdAt(sort: Desc)])
  @@index([parentReplyId])
  @@index([isHidden, createdAt(sort: Desc)])
  @@index([flaggedCount(sort: Desc)])
  @@map("replies")
}

model Interaction {
  id              String   @id @default(cuid())
  userWallet      String   @db.VarChar(44)
  targetType      String   @db.VarChar(10)
  targetId        String
  interactionType String   @db.VarChar(10)
  amount          Decimal? @db.Decimal(18, 6)
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userWallet], references: [walletAddress])

  @@unique([userWallet, targetId, interactionType])
  @@index([targetId, interactionType])
  @@index([userWallet, createdAt(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@map("interactions")
}

model Game {
  id          String   @id @default(cuid())
  postId      String   @unique
  gameType    String   @db.VarChar(20)
  player1     String   @db.VarChar(44)
  player2     String?  @db.VarChar(44)
  currentTurn String?  @db.VarChar(44)
  gameState   Json
  wager       Decimal  @db.Decimal(18, 6)
  winner      String?  @db.VarChar(44)
  status      String   @db.VarChar(20)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  player1User User     @relation("Player1Games", fields: [player1], references: [walletAddress])
  player2User User?    @relation("Player2Games", fields: [player2], references: [walletAddress])
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  winnerUser  User?    @relation("WonGames", fields: [winner], references: [walletAddress])

  @@index([status, createdAt(sort: Desc)])
  @@index([player1, status])
  @@index([player2, status])
  @@index([gameType, status])
  @@map("games")
}

model Report {
  id             String    @id @default(cuid())
  reporterWallet String    @db.VarChar(44)
  targetType     String    @db.VarChar(10)
  targetId       String
  reason         String    @db.VarChar(50)
  description    String?
  status         String    @default("pending") @db.VarChar(20)
  moderatorNotes String?
  resolvedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  reporter       User      @relation(fields: [reporterWallet], references: [walletAddress])

  @@unique([reporterWallet, targetId])
  @@index([status, createdAt(sort: Desc)])
  @@index([targetId, targetType])
  @@index([reporterWallet, createdAt(sort: Desc)])
  @@index([reason, status])
  @@map("reports")
}

model ModerationAction {
  id              String   @id @default(cuid())
  moderatorWallet String   @db.VarChar(44)
  targetType      String   @db.VarChar(10)
  targetId        String
  actionType      String   @db.VarChar(20)
  reason          String
  duration        Int?
  reportId        String?
  createdAt       DateTime @default(now())
  moderator       User     @relation("Moderator", fields: [moderatorWallet], references: [walletAddress])
  targetUser      User     @relation("ModeratedUser", fields: [targetId], references: [walletAddress])

  @@index([targetType, targetId])
  @@index([moderatorWallet, createdAt(sort: Desc)])
  @@index([actionType, createdAt(sort: Desc)])
  @@index([reportId])
  @@map("moderation_actions")
}

model RepEvent {
  id          String   @id @default(cuid())
  userWallet  String   @db.VarChar(44)
  eventType   String   @db.VarChar(50)
  category    String   @db.VarChar(20)
  points      Int
  multiplier  Decimal  @default(1.0) @db.Decimal(3, 2)
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userWallet], references: [walletAddress], onDelete: Cascade)

  @@index([userWallet, createdAt(sort: Desc)])
  @@index([eventType])
  @@index([createdAt])
  @@map("rep_events")
}

model WeeklyRepPool {
  id                   String    @id @default(cuid())
  weekStartDate        DateTime  @unique @db.Date
  weekEndDate          DateTime  @db.Date
  distributionDate     DateTime  @db.Date
  sponsoredPostRevenue Decimal   @default(0) @db.Decimal(18, 6)
  gameFeesCollected    Decimal   @default(0) @db.Decimal(18, 6)
  eventFeesCollected   Decimal   @default(0) @db.Decimal(18, 6)
  platformFeePercent   Int       @default(50)
  totalPoolSize        Decimal   @default(0) @db.Decimal(18, 6)
  totalRepGenerated    Int       @default(0)
  participantCount     Int       @default(0)
  distributed          Boolean   @default(false)
  distributedAt        DateTime?
  createdAt            DateTime  @default(now())

  @@map("weekly_rep_pools")
}

model SponsoredPost {
  id            String   @id @default(cuid())
  postId        String   @unique
  sponsorWallet String   @db.VarChar(44)
  campaignName  String   @db.VarChar(100)
  pricePaid     Decimal  @db.Decimal(18, 6)
  startDate     DateTime
  endDate       DateTime
  targetViews   Int      @default(0)
  actualViews   Int      @default(0)
  clickCount    Int      @default(0)
  weekNumber    Int
  yearNumber    Int
  revenueShared Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([weekNumber, yearNumber, revenueShared])
  @@index([startDate, endDate])
  @@map("sponsored_posts")
}

model TokenDistribution {
  id                String    @id @default(cuid())
  userWallet        String    @db.VarChar(44)
  weekStartDate     DateTime  @db.Date
  weekEndDate       DateTime  @db.Date
  distributionDate  DateTime  @db.Date
  repEarned         Int
  sharePercentage   Decimal   @db.Decimal(6, 4)
  tokensEarned      Decimal   @db.Decimal(18, 6)
  weeklyPoolSize    Decimal   @db.Decimal(18, 6)
  totalParticipants Int
  claimed           Boolean   @default(false)
  claimedAt         DateTime?
  createdAt         DateTime  @default(now())
  user              User      @relation(fields: [userWallet], references: [walletAddress], onDelete: Cascade)

  @@unique([userWallet, weekStartDate])
  @@index([userWallet, distributionDate(sort: Desc)])
  @@index([claimed, userWallet])
  @@index([weekStartDate, weekEndDate])
  @@map("token_distributions")
}

model Notification {
  id         String   @id @default(cuid())
  userId     String   @db.VarChar(44)
  type       String   @db.VarChar(20)
  title      String
  message    String
  read       Boolean  @default(false)
  fromUserId String?  @db.VarChar(44)
  postId     String?
  amount     Decimal? @db.Decimal(18, 6)
  createdAt  DateTime @default(now())
  fromUser   User?    @relation("NotificationSender", fields: [fromUserId], references: [walletAddress])
  post       Post?    @relation(fields: [postId], references: [id])
  user       User     @relation(fields: [userId], references: [walletAddress])

  @@index([userId, read, createdAt(sort: Desc)])
  @@map("notifications")
}
